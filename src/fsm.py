import logging

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.dispatcher.filters import Text

log_d = logging.debug

# States
class Form(StatesGroup):
    text = State()
    geo = State()
    photo = State()

async def process_text(message: types.Message, state: FSMContext):
    """
    Process text date
    """
    async with state.proxy() as data:
        data['text'] = message.text
    
    # start markup geo state 
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è", request_location=True))
    markup.add("–í–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
    await Form.next()
    await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏", reply_markup=markup)


async def process_geo_text_check(message:types.Message, state:FSMContext):
    await state.update_data(flag_text_link="Ok")
    await message.reply("–í—ã–±—Ä–∞–Ω–Ω –≤–≤–æ–¥ –≤ —Ä—É—á–Ω—É—é ( –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º ) \n –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reload")

async def process_geo_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data.get('flag_text_link') == None:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ")
        else:
            log_d(message.location)
            data['link'] = message.text
            await Form.next()
            await message.reply("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–º–∞–∫—Å 3)\n\t –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ /present_task")


async def process_geo_link(message: types.Message, state: FSMContext):  
    async with state.proxy() as data:
            data['link'] = message.location
    await Form.next()
    await message.reply("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–º–∞–∫—Å 3)\n\t –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ /present_task")
    
async def process_photo(message: types.Message,state: FSMContext):
    photo_list = ''
    async with state.proxy() as data:
        if data.get('photo') == None:
            data['photo'] =  message.photo[-1].file_id
        else:
            photo_list += "{}:{}".format(data['photo'],message.photo[-1].file_id) 
            data['photo'] = photo_list
        log_d(data.get('photo'))

def register_handlers_fsm(dp: Dispatcher):
    # text state 
    dp.register_message_handler(process_text,state=Form.text)
    # Geo state
    dp.register_message_handler(process_geo_text_check,Text(equals="–í–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", ignore_case=False), state=Form.geo)
    dp.register_message_handler(process_geo_text, state=Form.geo,content_types=ContentType.TEXT)
    dp.register_message_handler(process_geo_link, state=Form.geo,content_types=ContentType.LOCATION)
    # Photo get date
    dp.register_message_handler(process_photo,state=Form.photo, content_types=ContentType.PHOTO)

